import pywt
from scipy import signal

def main(input):
    print(input)
    data = input
#     data = [-37,-15,-27,-37,-24,-20,-87,-183,-111,231,636,708,322,-235,-580,-611,-482,-345,-235,-143,-87,-71,-73,-74,-64,-54,-47,-51,-61,-74,-85,-100,-119,-133,-113,-74,-32,-16,-15,-15,-14,-20,-28,-27,-16,-9,-6,-15,-34,-55,-61,-51,-35,-33,-49,-63,-68,-68,-66,-68,-74,-78,-78,-69,-65,-65,-53,-18,8,3,-35,-71,-90,-94,-96,-94,-89,-83,-77,-70,-61,-57,-57,-59,-61,-59,-37,-6,9,-12,-52,-89,-103,-106,-109,-108,-103,-95,-84,-71,-64,-59,-65,-69,-64,-39,-4,23,26,-1,-48,-90,-115,-114,-114,-113,-106,-88,-64,-54,-57,-52,-44,-71,-134,-127,91,445,645,450,-17,-421,-558,-487,-361,-261,-190,-145,-113,-81,-43,-13,-7,-23,-40,-55,-66,-77,-89,-98,-106,-115,-124,-129,-119,-89,-45,1,32,48,48,35,10,-18,-44,-57,-64,-68,-73,-72,-68,-70,-79,-79,-65,-41,-27,-34,-50,-65,-76,-80,-80,-81,-77,-74,-66,-61,-62,-72,-70,-45,-13,-4,-19,-49,-68,-71,-76,-85,-92,-91,-85,-80,-77,-82,-80,-67,-44,-24,-17,-20,-28,-38,-55,-77,-88,-94,-96,-96,-93,-87,-85,-80,-59,-47,-90,-169,-142,118,483,637,411,-32,-379,-483,-415,-317,-239,-186,-153,-132,-112,-101,-95,-101,-86,-56,-19,-4,-21,-52,-85,-104,-109,-103,-92,-79,-64,-49,-40,-29,-32,-34,-21,18,53,53,14,-33,-64,-82,-85,-86,-88,-89,-90,-92,-88,-82,-77,-81,-68,-30,18,46,30,-5,-39,-72,-94,-101,-97,-93,-92,-91,-88,-75,-69,-64,-69,-72,-55,-24,1,20,20,-16,-110,-209,-149,150,499,575,272,-180,-475,-513,-413,-308,-230,-169,-107,-46,-17,-13,-36,-56,-65,-69,-77,-99,-127,-144,-151,-139,-117,-101,-91,-75,-31,31,76,85,65,32,-1,-27,-46,-56,-60,-61,-72,-83,-89,-103,-109,-96,-65,-27,-12,-12,-13,-11,-18,-42,-56,-71,-81,-84,-78,-71,-75,-84,-75,-43,-15,-21,-45,-65,-63,-50,-38,-49,-60,-71,-75,-79,-78,-77,-73,-80,-78,-61,-39,-39,-52,-57,-48,-43]
    coeffs = pywt.wavedec(data, 'db6', level=2)
    print(coeffs)

    cA2,cD2, cD1 = coeffs
    print(cA2)

    dwt = []
    for c in cA2:
        dwt.append(c)

    f, Pxx_spec = signal.welch(cA2, fs=128, window='hann', nperseg=103,
                        noverlap=10, nfft=103, detrend='constant',
                        return_onesided=True, scaling='spectrum', axis=-1,
                        average='mean')

    psd = []
    for spec in Pxx_spec:
        psd.append(spec)

    print(psd)
    print(len(psd))

    return psd